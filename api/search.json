[{"id":"487367ff609355e6216873e9408d459b","title":"雅思","content":"IELTS\n剑雅真题8-16\n考点词538\nSIMON雅思课\n慎小嶷写作素材库\n\n软件\n\n雅思哥\n雅思考满分\n每日英语听题\n\npart1\n一般加特殊\n设置条件，一定要简单\n 平常怎么样，当什么时候，就怎么样，原因\n 开不开心，忙不忙，周日平时\n\n过去加现在\nlike之类的，过去怎么现在怎么，原因\n\n老年人年轻人男人女人\n一类人怎么样，原因\n\n\npart2\n题库\n\n想一个旅游的故事（尽量小众的地方）\nlonelyplanet.com\n\n在哪\n什么样\n做的一件事\n遇见的一个人\n看到的一个物品\n\n\n应用到题库\n\n\n小作文图表题20min 150词（注意时态）\n\nIntroduction\n一句话 介绍图表\n\nOverview\n两句话 选两个特点\n不要提到具体的（数字），不需要主观内容\n\nDetails\n第一句话 说明本段哪个图表\n\nDetails\n第一句话 说明本段哪个图表\n\n\n小作文 各图表句式Introduction\n\nGiven is a&#x2F;are two\ndiagram illustrating the process by which [thing] is [done]&#x2F;Interaction between …\ngraphs&#x2F;figures&#x2F;pie charts&#x2F;line graphs&#x2F;column graphs&#x2F;bar\ngraphs concerning&#x2F;comparing&#x2F;providing a comparison [of&#x2F;between something] in[place] in [year]&#x2F;during the period from… to… as well as… in these regions.\n\n\nA glance at the (two) graph&#x2F;figure&#x2F;pie chart&#x2F;table(s) provided reveals\nthe relative popularity of [thing] among [ppl] in [place] in [year].\nsome&#x2F;a number of striking similarities&#x2F;clear differences between [thing] in termsof [length&#x2F;age&#x2F;scale] in [place] during the period from… to…\n\n\nThe chart&#x2F;graph gives information regarding…\nDIAGRAM - The [thing] is&#x2F;are denoted by [symbol], while the [thing] is&#x2F;are marked as[symbol].\n\nparaphrase tips:between 1980 and 2012 &#x3D; over a period of 32 years&#x2F;over the period shownthe figure for…\nBody 正文\n\nOpening Sentences\nIt is evident&#x2F;apparent from the information supplied that …\nFrom the information supplied, it is evident that …\nAs shown in the figure, …\nWhile …, it seems that …\nOne particular interesting fact highlighted by the figure is that …\nAlso evident&#x2F;noteworthy is the fact that …\nNot surprisingly, … Equally predictable is the fact that …\nAs for&#x2F;with regard to {thing}, …\nIt is also interesting to note that …\nIn stark contrast, however, …\nIn contrast to [party], …\nYet, by far the most significant change to take place during the period in question was …\nThere were also considerable decreases in …\n\n\nLine Graph 折线图\n现在时 - From a negligible [value], the [figure] soars to [value] among …\n过去式 - From [value] in [yr], [figure] climbed steadily to [figure] in [yr], before soaringto a staggering [value] in [yr].\nIncreasing from approximately [value] in [year] to [value] in [year], [thing] then plungedto a low of just [value] in the [time].\nThe [figure&#x2F;thing], meanwhile, fluctuated at somewhere between [value n value] priorto [time], before dropping sharply to less than [value] in [time].\nThis is&#x2F;was followed by an exponential growth, with [thing&#x2F;figure] reaching a peak of[value].\nThe [time, eg. latter half of the century; following 5 yrs; subsequent decades], however,saw a sustained decline&#x2F;rapid growth in this figure, to somewhere in the vicinity of[value] in [time], followed by a steady fall&#x2F;rise.\nSecond in terms of [thing] was [party]. This [party] saw a threefold increase during theperiod in question, from [value] in [yr] to [value] in [yr].\nJust one year later, A overtook B as the primary source of…\n… increased by progressively small amounts and reached…\n… rose at an increasingly rapid rate, reaching [number] by [year] and [number] in [year].\n\n\nPie Chart 饼状图\nAs for [figure], men outnumber women 24 to 1.\nOverall, the number of [thing, eg. men and women studying part time] outnumberedthose [studying full-time] by a significant margin.\nSome 70% of the [thing] are [what], while the remainder are [what].\nOf these [things], [thing] is&#x2F;was the most …\nNot a single respondent to the survey rated [thing] as … in [yr]. However, by [yr] thisfigure stood at [value] — the second highest overall.\nAlso more popular is [thing], at [value] in [yr] compared to [value] a decade earlier.\n[Thing] — which was the second most [what] in [yr], accounting for [percent] ofrespondents — slipped to a mere [percent] in [yr].\n[Thing] was far more common in [party] than in any other [party] listed.\nThe prevalence of [thing] in [party] was double that of [party] and triple that of [party].\n[Party], meanwhile, had moderate levels of [thing].\nspending on A varied widely in the 3 year and was in the range of 7-16% of the totalbudget.\nin [year], x% of A did …, while the equivalent figure for B was y%.\nBoth UK and USA saw an increase in …, from x1% to x2% in UK and from y1% to y2%in USA.\nSth account for the highest proportion of UK … in both years, but only the third highestproportion in USA.\nBritish spent only half as much in relative terms on X as US residents.\nIn both countries, A and B took roughly x% and y% of the budgets respectively.\nthe majority of … were over 40 years of age. To be precise, …% of them were aged 50 ormore, and …% aged between 40 and 49. Younger adults were in the minority, with…\nIn Poland, however, studies take almost half the expenditure at 43%, followed bytransport at 26%.\ntake the vast majority\n\n\n\nvocab: account for&#x2F;make up x%\n\nColumn&#x2F;bar Graph 柱状图\nBy far the most common [thing] for this group, [thing] and [thing], were [done] astaggering [value] and [value] respectively.\nNumbering (some) [value], [thing] was the second for this group.\nThird (in terms of …) was [thing]\n, at approximately [value].\n. An approximate [value] of [thing] were [done] on [party] during the year inquestion.\n[Thing] and [thing] were considerably less common, at [value] and [value] respectively.\n[Thing] doubled from around [eg100] in [yr] to well over [eg200] in [yr].\nThe number of [thing] over the [eg.3] periods fluctuated, dropping from approximately[value] to [value]. (When X axis is time)\nFor [party], the trajectory was less consistent rising sharply in the [time, eg. first decade]and then tapering off to an almost identical level to that of [party] in [time].\nThe … partially follow this pattern.\n[figure] lies roughly between these two extremes.\n\n\n\n大作文\n议论文40min 250词\n4段13句\n\nIntroduction 2句\n介绍主题\n给出态度\n\n\n正文 5句\n中心句\n3个分论点\n一个例子\n\n\n正文 5句\n一个论点\n3句解释\n1句总结\n\n\nConclusion 1句\n第一段第二句话\n\n\n\n大作文 6种句型\nSimple sentences\nSugar makes people unhealthy.\nSugar harms people’s teeth.\n\n\nCompound sentences\nSugar makes people unhealthy and it harms their teeth.\n\n\nComplex sentences (一篇作文中至少用5句)\nWhile some people will support the tax, others will be against it.\nAlthough people will benefit, companies will suffer.\n\n\nPassive sentences\nSugary drinks are known to be addictive.\n\n\nQuestion sentences (一篇作文中最多用一次)\nBut would a sugary tax really work?\n\n\nConditional sentences (&#x3D;if)\nIf the government had taxed sugary drinks earlier then we would not have anobesity issue now.\n\n\n\n","slug":"雅思","date":"2024-07-30T03:56:53.000Z","categories_index":"","tags_index":"","author_index":"暗使开开"},{"id":"222b440dd80fa4c997be1565560f0d77","title":"C++面试题","content":"C++面试题简述下 C++ 语言的特点\nC++ 在 C 语言基础上引入了面对对象的机制，同时也兼容C语言。\n\nC++ 有三大特性（1）封装（2）继承（3）多态。\n\nC++ 语言编写出的程序结构清晰、易于扩充，程序可读性好。\n\nC++ 生成的代码质量高，运行效率高，仅比汇编语言慢 10%～20%；\n\nC++ 更加安全，增加了 const常 量、引用、四类 cast 转换（static_cast、dynamic_cast、const_cast、reinterpret_cast）、智能指针、try—catch 等等；\n\nC++ 可复用性高，C++ 引入了模板的概念，后面在此基础上，实现了方便开发的标准模板库STL（StandardTemplate Library）。\n\n同时，C++ 是不断在发展的语言。C++ 后续版本更是发展了不少新特性，如 C++11 中引入了 nullptr、auto变量、Lambda 匿名函数、右值引用、智能指针。\n\n\nC 语言和 C++ 的区别\nC 语言是 C++ 的子集，C++ 可以很好兼容C语言。但是 C++ 又有很多新特性，如引用、智能指针、auto 变量等。\nC++ 是面对对象的编程语言；C 语言是面对过程的编程语言。\nC 语言有一些不安全的语言特性，如指针使用的潜在危险、强制转换的不确定性、内存泄露等。而 C++ 对此增加了不少新特性来改善安全性，如 const 常量、引用、cast转换、智能指针、try—catch 等等；\nC++ 可复用性高，C++ 引入了模板的概念，后面在此基础上，实现了方便开发的标准模板库STL。C++ 的STL 库相对于 C 语言的函数库更灵活、更通用。\n\nC++ 结构体和 C 结构体的区别\nC 的结构体内不允许有函数存在，C++ 允许有内部成员函数，且允许该函数是虚函数。\n\nC 的结构体对内部成员变量的访问权限只能是 public，而 C++ 允许 public,protected,private 三种。\n\nC语言的结构体是不可以继承的，C++ 的结构体是可以从其他的结构体或者类继承过来的。\n\nC 中使用结构体需要加上 struct 关键字，或者对结构体使用 typedef 取别名，而 C++ 中可以省略 struct 关键字直接使用。\n\n使用区别\nC 中使用结构体需要加上 struct 关键字，或者对结构体使用 typedef 取别名，而 C++ 中可以省略 struct 关键字直接使用，例如：\nstruct Student&#123; int iAgeNum; string strName; &#125;typedef struct Student Student2; \t\t// C 中取别名struct Student stu1; \t\t\t\t\t// C 中正常使用Student2 stu2; \t\t\t\t\t\t// C 中通过取别名的使用Student stu3; \t\t\t\t\t\t// C++ 中使用\n\n静态局部变量，全局变量，局部变量的特点\n从作用域考虑\nC++ 里作用域可分为6种：全局，局部，类，语句，命名空间和文件作用域。全局变量：全局作用域，可以通过extern作用于其他非定义的源文件。局部变量：局部作用域，比如函数的参数，函数内的局部变量等等。静态局部变量 ：局部作用域，只被初始化一次，直到程序结束。\n\n\n从所在空间考虑\n除了局部变量在栈上外，其他都在静态存储区。因为静态变量都在静态存储区，所以下次调用函数的时候还是能取到原来的值。\n\n\n从生命周期考虑\n局部变量在栈上，出了作用域就回收内存。全局变量、静态全局变量、静态局部变量都在静态存储区，直到程序结束才会回收内存。\n\n\n\ni++ 和 ++i 的区别代码示例：\n#include &lt;iostream&gt;int main()&#123; int i = 2; int j = 2; j += i++; // 先赋值后加 std::cout &lt;&lt; &quot;i= &quot; &lt;&lt; i &lt;&lt; &quot;, j = &quot; &lt;&lt; j &lt;&lt; std::endl; //i= 3, j = 4 i = 2; j = 2; j += ++i; // 先加后赋值 std::cout &lt;&lt; &quot;i= &quot; &lt;&lt; i &lt;&lt; &quot;, j = &quot; &lt;&lt; j &lt;&lt; std::endl; //i= 3, j = 5&#125;\n\n\n赋值顺序不同：++ i 是先加后赋值；i ++ 是先赋值后加；++i和i++都是分两步完成的。\n\n效率不同：后置 ++ 执行速度比前置的慢。\n\ni++ 不能作为左值，而++i 可以，示例如下：\n\n\nint i = 0;int* p1 = &amp;(++i); // 正确int* p2 = &amp;(i++); // 错误++i = 1; \t  \t   // 正确i++ = 1; \t\t   // 错误\n\n 4.两者都不是原子操作。\n\n结构体和类的区别\nC++中的struct对C中的struct进行了扩充，它已经不再只是一个包含不同数据类型的数据结构了，它已经获取了太多的功能。struct能包含成员函数吗？ 能！struct能继承吗？ 能！！struct能实现多态吗？ 能！！！\n既然这些它都能实现，那它和class还能有什么区别？\n最本质的一个区别就是默认的访问控制：\n默认的继承访问权限\nstruct是public的，class是private的。\n\nC++面向对象\n\nstatic的作用\n静态分配方式下的内存在程序编译的时候就已经分配好了且存在于程序的整个运行过程。例如 static 变量，其生命周期随程序的结束而结束，而非像一般变量随函数或作用域的结束而结束。\n除了 static 变量，还有一种全局对象 static object，也可以存放在静态存储区。\nstatic是C++中很常用的修饰符，它被用来控制变量的存储方式和可见性。、\n需要一个数据对象为整个类而非某个对象服务,同时又力求不破坏类的封装性,即要求此成员隐藏在类的内部，对外不可见。\n\n变量的声明和定义有什么区别为变量分配地址和存储空间的称为定义，不分配地址的称为声明。一个变量可以在多个地方声明，但是只在一个地方定义。加入 extern 修饰的是变量的声明，说明此变量将在文件以外或在文件后面部分定义。说明：很多时候一个变量，只是声明不分配内存空间，直到具体使用时才初始化，分配内存空间，如外部变量。\n\nextern是什么\nextern int i; //声明，不是定义int i; //声明，也是定义\n\n\n\n","slug":"C面试题","date":"2024-07-30T03:50:33.000Z","categories_index":"","tags_index":"","author_index":"暗使开开"},{"id":"67a07993746681dd1e13888391663bfc","title":"总线的分类","content":"总线的分类1.片内总线芯片内部 的总线\n2.系统总线计算机各部件之间 的信息传输线\n数据总线 双向 与机器字长、存储字长有关地址总线 单向 与存储地址、 I&#x2F;O地址有关控制总线 有出（中断请求、总线请求） 有入（存储器读、存储器写 总线允许、中断确认）\n3.通信总线用于 计算机系统之间 或 计算机系统与其他系统（如控制仪表、移动通信等）之间的通信\n传输方式：串行通信总线 并行通信总线\n","slug":"总线的分类","date":"2022-08-29T15:02:22.000Z","categories_index":"","tags_index":"","author_index":"暗使开开"},{"id":"fe4ea5ff50282301f0085214fc01e7b3","title":"总线控制","content":"总线控制一、总线判优控制1. 基本概念\n主设备(模块) 可以提出总线占用请求，控制和其他设备之间的通信过程 对总线有 控制权（有些总线可以由多个主设备）\n从设备(模块) 响应 从主设备发来的总线命令\n总线判优控制：集中式(总线控制部件集中在一起)，分布式\n集中式：链式查询，计数器定时查询，独立请求方式\n分布式\n\n\n\n2. 链式查询方式\n数据总线：用于信息交换过程中数据传输\n地址总线：主设备占用总线之后，和从设备进行数据传输通过地址总线找到从设备\nBR：所有设备都通过BR发起总线占用请求\nBS：如果有设备占用总线，就通过BS告诉其他设备总线忙\nBG：总线授权线，一个一个向下查询（链式查询）\n\nI&#x2F;O接口（外设）有占用请求时，通过BR给总线控制部件发送占用请求\n总线控制部件接受到请求以后且可以让出总线的控制权（BS总线不忙）时，通过BG总线授权信号逐个进行查询是哪个I&#x2F;O接口（设备）发出的请求\n总线授权信号碰到第一个提出总线占用请求的接口，则它就获得了总线的使用权，并且通过BS设置总线忙\n\n链式查询\n缺点：优先级事先已经确定的，优先级太低的可能一直得不到总线授权。对电路故障特别敏感，如果BG上的某接口出现电路故障，信号不会往下传，后面的设备永远无法获得使用权，速度慢\n优点：结构简单，优先级算法简单，增删设备简单，进行可靠性设计时容易实现\n一般运用在微型计算机，简单的嵌入式系统中\n3. 计数器定时查询方式\nBG线变成了设备地址线（宽度和设备地址有关）\n\nI&#x2F;O接口（外设）有占用请求时，通过BR给总线控制部件发送占用请求\n总线控制部件接受到请求以后且可以让出总线的控制权（BS总线不忙）时，启动总线控制部件中的计数器，计数器的值通过设备地址这条线向外输出查询接口\n计数器根据计数器的值访问对应I&#x2F;O接口，如果不是就加一，继续访问，直到碰到第一个提出总线占用请求的接口，则它就获得了总线的使用权，并且通过BS设置总线忙\n\n缺点：比链式查询需要的线多，log2n向上取整+2条线，速度慢\n优点：优先级确定非常灵活，如：每次从0或K开始一直到n，则0或k接口优先级最高，如：每次从上一次数值开始变成循环优先级等等。\n4. 独立请求方式\n每个接口都有自己的BR，BG线\n优先级由总线控制部件内部的排队器决定\n\nI&#x2F;O接口（外设）有占用请求时，通过自己的BR给总线控制部件发送占用请求\n总线控制部件接受到请求以后且可以让出总线的控制权（BS总线不忙）时，经过排队其排队以后，对某一个（根据优先级）提出总线控制请求的设备进行总线授权\n获得总线控制部件应答的设备，就占用了总线的使用权\n\n优点：优先级确定非常灵活，自定义排队器\n缺点：需要的线多2n条线\n二、总线通信控制1. 目的： 解决通信双方协调配合问题2. 总线传输周期\n申请分配阶段： 主模块申请，总线仲裁决定（总线判优逻辑：上面所解决的问题）\n寻址阶段： 主模块（向从模块）给出地址（找到从设备） 和 命令（控制从设备完成相应的操作）\n传数阶段： 主模块和从模块交换数据\n结束阶段： 主模块和从模块都撤消有关信息\n\n3. 总线通信的四种方式\n同步通信：由统一时标控制数据传送 应用在总线长度比较短且各个模块存取时间比较一致的情况下\n异步通信：采用应答方式 ，没有公共时钟标准\n半同步通信： 同步、异步结合\n分离式通信： 充分挖掘系统总线每个瞬间的潜力\n\n\n同步通信：由统一时标控制数据传送(主从模块是强制同步的，速度不同模块需要选择速度最慢的模块作为统一的时标)CPU用同步通信的方式从外部设备进行数据输入\n同步通讯有定宽定距的时标来控制整个数据的传输过程\n时钟信号：总线传输周期由四个时钟周期构成，这四个时钟周期就可以完成一次完整可靠的数据通信\nCPU完成数据输入需要地址信号，读信号，从设备在给定的时间点上给出数据的输出，对CPU来说时数据的输入\n在固定的时间点上要给出固定的操作：\n\nT1时钟周期的上升沿CPU（主设备）必须给出地址信号，\nT2时钟周期的上升沿必须给出读命令信号告诉从设备CPU（主设备）要从从模块读入数据\nT3时钟周期的上升沿到达之前从设备必须通过数据总线给出数据信号\nT4时钟周期的上升沿数据信号和读信号（控制信号）可以撤销，T4结束时地址信号也撤销\n\n\nCPU用同步通信的方式把数据输出到外部设备\n同步通讯有定宽定距的时标来控制整个数据的传输过程\n时钟信号：总线传输周期由四个时钟周期构成，这四个时钟周期就可以完成一次完整可靠的数据通信\nCPU完成数据输入需要地址信号，写信号\n在固定的时间点上要给出固定的操作：\n\nT1时钟周期的上升沿CPU（主设备）必须给出地址信号，\nT1时钟周期的下降沿给出数据\nT2时钟周期的上升沿必须给出写命令信号 向从设备进行数据写入\nT4时钟周期的上升沿数据信号和写信号（控制信号）可以撤销，T4结束时地址信号也撤销\n\n\n异步通信： 采用应答方式，没有公共时钟标准主设备发起请求，从设备受主设备控制，不用定宽定距的时钟\n\n\n异步通信不互锁方式（通信没有可靠性）：主设备发起通信请求，从设备接受到主设备请求发出应答信号，主设备撤销请求信号，从设备撤销应答信号，主设备不管有没有收到应答信号，一定延时后都会撤销请求信号，从设备不管主设备有没有接到应答信号，一定延时后都会撤销应答信号\n异步通信半互锁方式（可能造成主设备请求信号一直保持高电平）：主设备发起通信请求，从设备接受到主设备请求发出应答信号，主设备接收到应答信号以后撤销请求信号，如果接收不到，请求信号会保持，从设备不管主设备有没有接到应答信号，一定延时后都会撤销应答信号\n异步通信全互锁方式（通过握手信号完成可靠的数据传输通信联络）：主设备发起通信请求，从设备接受到主设备请求发出应答信号，主设备接收到应答信号以后撤销请求信号，如果接收不到，请求信号会保持，只有主设备的请求信号撤销以后，从设备才会撤销自己的应答信号\n\n半同步通信： 同步、异步结合\n同步： 发送方 用系统 时钟前沿 发信号\n接收方 用系统 时钟后沿 判断、识别\n\n异步 允许不同速度的模块和谐工作 增加一条 “等待”响应信号 WAIT\n\n\n以输入数据为例的半同步通信时序（主模块熟读快，等从模块回应）\nT1 主模块发地址\nT2 主模块发命令\nTw 当 WAIT为低电平时，等待一个 T\nTw 当 WAIT为低电平时，等待一个 T\n…\nT3 从模块提供数据\nT4 从模块撤销数据，主模块撤销命令\n\nT1时钟周期的上升沿CPU（主设备）必须给出地址信号，\nT2时钟周期的上升沿必须给出读命令信号告诉从设备CPU（主设备）要从从模块读入数据\nT3时钟周期开始之前，从设备如果不能把数据准备好，通过WAIT信号给出低电平，告诉主设备进行等待，CPU会在第三个时钟周期到来之前插入一个时钟周期Tw（循环往复）\n数据已经准备好放在数据总线上，WAIT变成高电平时，则该Tw结束后开始T3周期\nT4时钟周期的上升沿数据信号和读信号（控制信号）可以撤销，T4结束时地址信号也撤销\n\n\n上述三种通信的共同点一个总线传输周期（以输入数据为例）\n\n主模块发地址 、命令： 占用总线\n从模块准备数据： 不占用总线 总线空闲\n从模块向主模块发数据： 占用总线\n\n总线有空闲\n分离式通信 充分挖掘系统总线每个瞬间的潜力一个总线传输周期，子周期1和2之间用来让从模块准备数据，子周期2中从模块已经变成了主模块\n\n读数据时，准备数据 硬盘有三步操作：\n主模块向从模块发出找指定磁道请求后，放弃总线使用权\n\n定位：磁头镜像移动，寻找指定磁道（时间长）\n\n硬盘找到指定磁道变成主模块，发出找对应扇区的请求后，放弃总线使用权\n\n找到指定扇区：磁头停止在磁盘表面不动，磁盘围绕轴转动（时间长）\n\n硬盘找到指定扇区变成主模块，发出读请求，进行数据传输\n\n读数据\n\n\n分离式通信特点（充分提高了总线的有效占用）\n\n\n各模块有权申请占用总线\n采用同步方式通信，不等对方回答\n各模块准备数据时，不占用总线\n总线被占用时，无空闲\n\n","slug":"总线控制","date":"2022-08-29T15:02:22.000Z","categories_index":"","tags_index":"","author_index":"暗使开开"},{"id":"ba68949a58e3c0521996a1c671405388","title":"总线的基本概念","content":"总线的基本概念一、为什么要用总线把各个部件连接起来，方便维护管理各部件\n二、什么是总线总线是连接各个部件的信息传输线，是各个部件共享的传输介质\n三、总线上信息的传送串行——-\n并行&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n四、总线结构的计算机举例\n单总线结构框图\n\n\n面向 CPU 的双总线结构框图\n\n\n以存储器为中心的双总线结构框图\n\n\n\n","slug":"总线的基本概念","date":"2022-08-29T15:02:22.000Z","categories_index":"","tags_index":"","author_index":"暗使开开"},{"id":"862ecabae65544f00e4a4f42f663a791","title":"Hexo","content":"Hexo 基本操作\nhexo s\nhexo new post markdown_name\nhexo init 项目名称 在想要存储项目的目录下执行，创建项目\n\n上传日志到云服务器 or GitHub\nhexo clean\nhexo g -d\n\n安装配置Hexo环境配置nvm安装\nhttps://github.com/coreybutler/nvm-windows/releases\n下载后安装 安装完毕后，找到安装的路径，一些简单配置，打开setting.txt增加镜像源提高下载速度\n\nnone\nnode_mirror: https://npm.taobao.org/mirrors/node/npm_mirror: https://npm.taobao.org/mirrors/npm/\n\n\nnvm version 检验是否安装成功\n\nNode安装\nnvm install 14\nnvm list\nnvm use 14 (进入安装目录，用管理员运行cmd)\nnode -v\n\n安装hexonpm install hexo-cli -g\n创建Hexocd 目录\nhexo init blog(文件名)\ncd blog\nhexo s\nhexo n “markdown_name” &#x3D;&#x3D; hexo new post markdown_name\n解决运行Hexo报错hexo : 无法加载文件hexo.ps1，因为在此系统上禁止运行脚本设置-&gt;隐私和安全性-&gt;开发者选项-&gt;允许本地PowerShell脚本在为签名的情况下运行\n","slug":"Hexo 基本操作","date":"2022-08-29T15:02:22.000Z","categories_index":"","tags_index":"","author_index":"暗使开开"},{"id":"13d39ce5494ddd5022f4722dceb80b96","title":"计算在世界上的天数","content":"计算在世界上的天数#include &lt;stdio.h&gt;int main()&#123;        int year1,year2,month1,month2,day1,day2;        int a[13]= &#123;0,31,28,31,30,31,30,31,31,30,31,30,31&#125;;        printf(&quot;birthday:2001 02 06:&quot;);        scanf(&quot;%d %d %d&quot;,&amp;year1,&amp;month1,&amp;day1);        printf(&quot;now:2022 05 16:&quot;);        scanf(&quot;%d %d %d&quot;,&amp;year2,&amp;month2,&amp;day2);        int num=0,i,j,k;        if((year2-year1)&gt;1)        &#123;                for(i=year1+1;i&lt;=year2-1;i++)                &#123;                        if(i%4==0&amp;&amp;i%100!=0||i%400==0)                        &#123;                                num=num+366;                        &#125;                        else num=num+365;                &#125;        &#125;        if(year1%4==0&amp;&amp;year1%100!=0||year1%400==0) a[2]=29;        if(year1==year2)        &#123;                for(i=month1+1;i&lt;month2;i++)                &#123;                        num=num+a[i];                &#125;                num=num+(a[month1]-day1)+day2;        &#125;        a[2]=28;        if(year1!=year2)        &#123;                if(year1%4==0&amp;&amp;year1%100!=0||year1%400==0) a[2]=29;                for(i=month1+1;i&lt;=12;i++)                &#123;                        num+=a[i];                &#125;\t\t\t\tnum+=(a[month1]-day1);                a[2]=28;                if(year2%4==0&amp;&amp;year1%100!=0||year2%400==0) a[2]=29;                for(i=month2-1;i&gt;=1;i--)                &#123;                num+=a[i];                &#125;                num+=day2;        &#125;        printf(&quot;You have lived %d days.\\n&quot;,num);        return 0;&#125;","slug":"计算在世界上的天数","date":"2022-08-29T15:02:22.000Z","categories_index":"","tags_index":"","author_index":"暗使开开"},{"id":"88e51c25651f7ab23251517d494ade0d","title":"总线特性及性能指标","content":"总线特性及性能指标一、总线物理实现\n总线印刷在主板（印刷电路板）上 ，在总线上留出接口给模块插板用来连接\n二、总线特性\n机械特性 尺寸、形状、管脚数 及 排列顺序\n电气特性 传输方向 和有效的 电平 范围\n功能特性 每根传输线的 功能：地址，数据，控制\n时间特性 信号的 时序 关系\n\n三、总线的性能指标\n总线宽度 数据线 的根数\n标准传输率 每秒传输的最大字节数（MBps）\n时钟同步&#x2F;异步 同步、不同步\n总线复用 地址线 与 数据线 复用\n信号线数 地址线、数据线和控制线的 总和\n总线控制方式 突发、自动、仲裁、逻辑、计数\n其他指标 负载能力\n\n四、总线标准\n\n带宽（28）&#x3D;数据线（16根就是2字节Byte）总线时钟（8MHz）\nISA：工业标准体系结构\nEISA：兼容ISA\nVESA（VL-BUS）：视频电子标准协会 大部分信号来自CPU 驱动能力差\nPCI：外设部件互联标准 独立于处理器的结构 形成特殊的中间缓冲器式的设计，把中央处理器子系统和外设分开，用户可以随意添加外设，不用担心在不同的时钟频率下导致计算机性能的下降\nAGP：Inter推出的接口，点对点的局部总线 为了连接控制芯片和显卡\nRS-232：串行通信 总线标准\nUSB：串行接口 总线标准\n","slug":"总线特性及性能指标","date":"2022-08-29T15:02:22.000Z","categories_index":"","tags_index":"","author_index":"暗使开开"},{"id":"8dc7cd46376ad8466899f7367562bde2","title":"计算机的展望","content":"计算机的展望一、计算机具有类似人脑的一些超级智能功能\n要求计算机的速度要足够快\n二、芯片集成度的提高受以下三方面的限制\n\n芯片集成度受物理极限的制约\n按几何级数递增的制作成本\n芯片的功耗、散热、线延迟\n\n三、替代传统的硅芯片\n\n光计算机\n利用光子取代电子进行运算和存储\n\nDNA生物计算机\n通过控制DNA分子间的生化反应\n\n量子计算机\n利用原子所具有的量子特性\n\n\n","slug":"计算机的展望","date":"2022-08-29T15:02:22.000Z","categories_index":"","tags_index":"","author_index":"暗使开开"},{"id":"f18e335be203daef5375edd1ee27ca4d","title":"计算机的发展史","content":"计算机的发展史一、计算机的产生和发展世界上第一台电子计算机 ENIAC(1946)\n1946年 美国 ENIAC 1955年退役十进制运算18 000 多个电子管1 500 多个继电器150 千瓦30 吨1 500 平方英尺5 000 次加法／秒用手工搬动开关和拔插电缆来编程\n现代计算机产生的驱动力\n需求、需求、还是需求\n技术发展\n电子技术的发展\n计算机体系结构技术的发展\n\n\n\n硬件技术对计算机更新换代的影响\n\n\n代\n时间\n硬件技术\n速度（次&#x2F;秒）\n\n\n\n一\n1946－1957\n电子管\n40 000\n\n\n二\n1958－1964\n晶体管\n200 000\n\n\n三\n1965－1971\n中小规模集成电路\n1 000 000\n\n\n四\n1972－1977\n大规模集成电路\n10 000 000\n\n\n五\n1978－现在\n超大规模集成电路\n100 000 000\n\n\nIAS的逻辑结构以运算器为中心的冯诺依曼计算机结构\n\n\n\n\n\n\n\n\n\n\n\n\nMain Memory\n&lt;&#x3D;&gt;\nArithmetic Logic Unit\n&lt;&#x3D;&gt;\nI&#x2F;O Equipment\n\n\n\n\n||\n\n\n\n\n\n&lt;&#x3D;&gt;\nProgram Control Unit\n\n\n\n\nIBM System &#x2F; 360系列产品 大中小型360\n二、微型计算机的出现和发展微处理器：用一片大规模的集成电路，组成的处理器，集成了运算器和控制器\n微型计算机：使用微处理器、集成度相当高、大规模集成电路，面向个人用户体积小、重量轻、价格低的计算机\n\n\n\n微处理器芯片（Intel）\n1971年\n存储器芯片\n1970\n\n\n\n4位（4004）\n1971\n256 位\n\n\n\n8位（8080）\n1974\n1 K位\n\n\n\n16位（8086、80286）2.9 万个晶体管\n1979、1982\n4 K位\n\n\n\n32位（80386、80486）27.5 万个晶体管\n1985、1989\n16 K位\n\n\n\n64位（Pentium、Pentium Pro、Pentium Ⅱ、Pentium Ⅲ、Pentium Ⅳ）4 200.0 万个晶体管\n1993、1995、1997、1999、2000\n64 K位\n\n\n\n目前芯片可集成30亿个晶体管\n\n256 K位\n\n\n\n\n\n1 M位\n\n\n\n\n\n4 M位\n\n\n\n\n\n16 M位\n\n\n\n\n\n64 M位\n\n\n\nMoore 定律：Intel 公司的缔造者之一 Gordon Moore 提出微芯片上集成的晶体管数目每三年翻两番（4倍）\n三、软件技术的兴起和发展1. 各种语言机器语言 面向机器\n汇编语言 面向机器\n高级语言 面向问题\n FORTRAN 科学计算和工程计算\n PASCAL 结构化程序设计\n C＋＋ 面向对象\n Java 适应网络环境\n2. 系统软件\n\n\n语言处理程序\n汇编程序 编译程序 解释程序\n\n\n\n操作系统\nDOS、UNIX、Windows、Linux、Kylin Linux\n\n\n服务性程序\n装配 调试 诊断 排错\n\n\n数据库管理系统\n数据库和数据库管理软件\n\n\n网络软件\n\n\n\n3. 软件发展的特点\n开发周期长\n\n制作成本昂贵\n\n检测软件产品质量的特殊性\n软件是程序以及开发、使用和维护程序所需要的所有文档\n\n\n","slug":"计算机的发展史","date":"2022-08-29T15:02:22.000Z","categories_index":"","tags_index":"","author_index":"暗使开开"},{"id":"57fbb8bedac43540c8f51c0ee11adbc5","title":"计算机硬件的主要技术指标","content":"计算机硬件的主要技术指标\n1.机器字长CPU 一次能处理数据的位数 与 CPU 中的 寄存器位数 有关（相等）\n\n2.运算速度主频\n核数，每个核支持的线程数\n吉普森法\nCPI 执行一条指令所需时钟周期数\nIPC 一个时钟周期数能执行多少条指令\nMIPS 每秒执行百万条指令\nFLOPS 每秒浮点运算次数\n\n3.存储容量存放二进制信息的总位数\n\n主存容量\n\n存储单元个数 × 存储字长\n\n\n\nMAR\nMDR\n容量\n\n\n\n10位\n8位\n1 K*8位（1 K&#x3D;210）\n\n\n16位\n32位\n64 K*32位\n\n\n\n字节数\n213 b&#x3D; 1 KB(1 B &#x3D; 23 b)\n221 b&#x3D; 256 KB\n\n\n\n辅存容量\n字节数 80 GB（1GB &#x3D; 230B）\n\n\n\n\n","slug":"计算机硬件的主要技术指标","date":"2022-08-29T15:02:22.000Z","categories_index":"","tags_index":"","author_index":"暗使开开"},{"id":"01d906b6031118ca7dc7178db4a7223b","title":"总线结构","content":"总线结构一、单总线结构\n把所有设备连接到一条总线上，导致总线成为系统瓶颈，采用多总线结构\n二、多总线结构1. 双总线结构\n存储总线和I&#x2F;O总线分离，通过通道连接，通道有自己的控制器，指令系统等等，通道通常由操作系统来编写的\n2.三总线结构\nDMA总线：直接存储器访问，高速外设直接访问内存，低速还要走I&#x2F;O总线\n3. 三总线结构的又一形式\nCPU更新快，内存速度迭代慢，在CPU和内存之间增加了一个小容量高速度的Cache，对主存中的数据进行缓存，CPU运行需要的指令和数据主要从Cache中获取，局部总线把CPU和Cache连接起来，局部I&#x2F;O控制器连接高速I&#x2F;O设备，系统总线通过扩展总线接口连接扩展总线，各种设备都连接到了扩展总线上，解决了I&#x2F;O设备的扩展问题。但是多种类型的设备连接到扩展总线，影响外设的工作速度\n4. 四总线结构\n局部总线连接CPU和Cache&#x2F;桥，系统总线连接主存和Cache&#x2F;桥，桥电路扩展出了一个高速总线，用来连接高速外设，低速设备可以连接到扩展总线上，扩展总线通过接口连接高速总线，把高速和低速分开组织，提高数据传输速率\n三、总线结构举例1. 传统微型机总线结构\n2. VL-BUS局部总线结构\nVL-BUS高速低速分开\n3. PCI 总线结构\nPCI高速低速分开\n4. 多层 PCI 总线结构\n如果PCI总线连接的设备太多，总线驱动能力不够，可以通过PCI桥进行扩展\nCPU和存储器通过存储器总线连接，下面是桥电路，通过桥电路实现驱动能力的提高\n","slug":"总线结构","date":"2022-08-29T15:02:22.000Z","categories_index":"","tags_index":"","author_index":"暗使开开"},{"id":"ef19fa8a649369ddae37d49f372def59","title":"计算机的应用","content":"计算机的应用一、科学计算和数据处理\n二、工业控制和实时控制\n三、网络技术\n\n电子商务\n网络教育\n敏捷制造\n\n四、虚拟现实\n五、办公自动化和管理信息系统\n六、CAD&#x2F;CAM&#x2F;CIMS\n七、多媒体技术\n八、人工智能\n","slug":"计算机的应用","date":"2022-08-29T15:02:22.000Z","categories_index":"","tags_index":"","author_index":"暗使开开"},{"id":"ee6ffbefdb1e53ca7036ca0db67b41e3","title":"计算机系统简介","content":"计算机系统简介物联网把感应器嵌入和装备到电网、铁路、桥梁、隧道、公路、建筑、供水系统、大坝、油气管道等各种物体中，并且被普遍连接，形成所谓“物联网”\n一.计算机系统硬件：计算机的实体，如主机，外设等\n软件：由具有各类特殊功能的信息（程序）组成\n软件系统软件：用来管理整个计算机系统\n\n语言处理程序\n操作系统\n服务性程序\n数据库管理系统\n网络软件\n\n应用软件：按任务需要编制成的各种程序\n二.计算机系统的层次结构系统复杂性管理的方法-1\n抽象抽象-对于一个过程或者一件制品的某些细节有目的的隐藏，以便把其他方面、细节或者结构表达得更加清楚—-百度百科抽象-指高级的模型，和低级的实体相对—–维基百科抽象-隐藏系统中不重要的细节。—–David Harris\n\n从物理构成的角度把计算机系统抽象成九层 依据是每一层计算机典型的构建模块\n\n\n\nApplication Software\nprograms\n\n\n\nOperating Systems\nadders memories\n\n\nArchitecture\ndevice drivers\n\n\nMicroarchitecture\ninstructions registers\n\n\nLogic\ndatapaths controllers\n\n\nDigital Circuits\nand gate not gate\n\n\nAnalog Circuits\namplifiers filters\n\n\nDevices\ntransistors diodes\n\n\nPhysics\nelectros\n\n\n\n从程序员的角度，把计算机系统抽象成五层\n\n\n\n高级语言\n虚拟机器M4（软件）\n用编译程序翻译成汇编语言程序\n\n\n\n汇编语言\n虚拟机器M3（软件）\n用汇编程序翻译成机器语言程序\n\n\n操作系统\n虚拟机器M2（软件）\n用机器语言解释操作系统\n\n\n机器语言\n实际机器M1（硬件）\n用微指令解释机器指令\n\n\n微指令系统\n微程序机器M0（硬件）\n由硬件直接执行微指令\n\n\n\n\n计算机系统（体系）结构：（例如：定义有无乘法指令）\n\n程序员（机器语言程序员）所见到的计算机系统的属性（指令集及其能够对哪些类型的数据进行操作，寄存器文件的组织，内存的编址单位） 概念性的结构与功能特性（指令系统、数据类型、寻址技术、I&#x2F;O机理）\n定义了计算机系统软硬件的交界面，定义了哪些功能由软件来实现，哪些功能由硬件来实现，提供了上层软件进行编写的时候和硬件进行交互的接口\n\n计算机组成：（例如：如何实现乘法指令）\n\n实现计算机体系结构所体现的属性（具体指令的实现）\n\n","slug":"计算机系统简介","date":"2022-08-29T15:02:22.000Z","categories_index":"","tags_index":"","author_index":"暗使开开"},{"id":"0c48a428566e19d732a05162b62e7687","title":"计算机的基本组成","content":"计算机的基本组成现在的计算机都是存储程序结构的计算机\n一、冯·诺依曼计算机（以运算器为中心）的特点\n\n计算机由五大部件组成（输入设备，运算器，控制器，存储器，输出设备）\n指令和数据以同等地位存于存储器，可按地址寻访\n指令和数据用二进制表示\n指令由操作码和地址码组成\n存储程序\n以运算器为中心\n\n二、计算机硬件框图1.计算机硬件框图（以存储器为中心）\n2.现代计算机硬件框图\nCPU：ALU（运算器），CU（控制器）\n存储器：主存，副存\n主机：CPU，存储器\nI&#x2F;O设备：输入设备，输出设备\n硬件：主机系统，I&#x2F;O设备\n系统复杂性管理的方法-2（3’Y）\n层次化（Hierachy）：将被设计的系统划分为多个模块或子模块\n模块化（Modularity）：有明确定义（well-defined）的功能和接口\n规则性（regularity）：模块更容易被重用\n\n三、计算机的工作步骤一个现实中的问题，如何用计算机来解决？\n1. 上机前的准备\n建立数学模型\n编制解题程序\n确定计算方法程序 —— 运算的 全部步骤指令 —— 每 一个步骤\n编程举例：计算 ax2 + bx + c&#x3D; (ax + b)x + c\n\n\n取x 至运算器中\n乘以x 在运算器中\n乘以a 在运算器中\n存ax2 在存储器中\n取b 至运算器中\n乘以x 在运算器中\n加ax2 在运算器中\n加c 在运算器中\n\n或者\n\n取x 至运算器中\n乘以a 在运算器中\n加b 在运算器中\n乘以x 在运算器中\n加c 在运算器中\n\n\n指令格式举例：操作码|地址码\n\n\n\n\n指令和数据存于主存单元的地址\n操作码\n地址码\n步骤\n注释\n\n\n\n0\n000001(取数)\n0000001000（α）\n[α] -&gt;ACC\n取数x至ACC\n\n\n1\n000100(存数)\n0000001001(β)\n[ACC] -&gt; β\n乘a得ax ,存于ACC中\n\n\n2\n000011(加)\n0000001010(γ)\n[ACC]+[γ] -&gt; ACC\n加b得ax+b ,存于ACC中\n\n\n3\n000100(乘)\n0000001000(δ)\n[ACC]×[δ] -&gt; ACC\n乘x得（ax+b)x,存于ACC中\n\n\n4\n000011\n0000001011\n\n加c得ax2 + bx + c ,存于ACC\n\n\n5\n000010\n0000001100\n\n将ax2 + bx +c ,存于主存单元\n\n\n6\n000011(打印)\n0000001011(o)\n[ o ] -&gt; 打印机\n打印\n\n\n7\n000110\n\n\n停机\n\n\n8\nx\n\n\n原始数据x\n\n\n9\na\n\n\n原始数据a\n\n\n10\nb\n\n\n原始数据b\n\n\n11\nc\n\n\n原始数据c\n\n\n12\n\n\n\n存放结果\n\n\n指令和数据都是保存在存储器中的\n2.计算机的解题过程1. 存储器的基本组成\n存储器：存储体，MAR，MDR\n\n存储体 -存储单元 -存储元件（0&#x2F;1）\n大楼 -房间 -床位（无人&#x2F;有人）\n\n\n\n\n存储单元\n存放一串二进制代码\n\n\n\n存储字\n存储单元中二进制代码的组合\n\n\n存储字长\n存储单元中二进制代码的位数\n\n\n按地址寻访\n每个存储单元赋予一个地址号\n\n\nMAR：存储器地址寄存器，反映存储单元（房间）的个数\nMDR：存储器数据寄存器，反映存储字长\n例如：MAR &#x3D; 4 位 -&gt; 存储单元个数 16MDR &#x3D; 8 位 -&gt; 存储字长 8\n2. 运算器的基本组成及操作过程\n运算器：X-&gt;ALU&lt;&#x3D;&gt;ACC&lt;&#x3D;&gt;MQ\n\n\n\n\nACC\nMQ\nX\n\n\n\n加法\n被加数和\n\n加数\n\n\n减法\n被减数差\n\n减数\n\n\n乘法\n乘积高位\n乘数乘积低位\n被乘法\n\n\n除法\n被除数余数\n商\n除法\n\n\nALU：算咯运算单元\n① 加法操作过程\n\n\n\n\n指令\n加\nM\n\n\n\n初态ACC被加数\n\n[M] -&gt; X 把M中的值给X\n\n\n得到\n[ACC]+[X] -&gt; ACC 运算结果给ACC\n\n\n\n② 减法操作过程\n\n\n\n\n指令\n减\nM\n\n\n\n初态ACC被减数\n\n[M] -&gt; X 把M中的值给X\n\n\n得到\n[ACC]-[X] -&gt; ACC 运算结果给ACC\n\n\n\n③ 乘法操作过程\n\n\n\n\n指令\n乘\nM\n\n\n\n初态ACC被乘数\n\n[M] -&gt; MQ\n\n\n[ACC] -&gt; X把ACC的内容送到X\n0 -&gt; ACC把ACC清零\n\n\n\n得到\n[X]*[MQ] -&gt; ACC&#x2F;MQ\n\n\n\n④ 除法操作过程\n\n\n\n\n指令\n除\nM\n\n\n\n初态ACC被除数\n\n[M] -&gt; X\n\n\n得到\n[ACC]&#x2F;[X] -&gt; MQ\n\n\n\n余数在ACC中\n3.控制器的基本组成\n\n控制器：CU，IR，PC\n\nCU：控制单元\nPC: 存放当前欲执行指令的地址， 具有计数功能（PC）+ 1 -&gt; PC\nIR: 存放当前欲执行的指令\n\n\n完成一条指令：取指令PC -&gt; 分析指令IR -&gt; 执行指令CU\n运算器、控制器、存储器构成了什么主机\n一条指令在主机上的完成过程\n程序在主机上是如何执行的\n\n4.主机完成一条指令的过程以取数指令为例\n\nPC把需要的指令的地址送给MAR（控制器上的PC中存放着要执行的指令的地址，指令保存在存储体当中）\nMAR把地址送给存储体（在控制器的控制下，存储体把指定存储单元当中保存的取数指令取出来，送入MDR中）\n存储体把指定存储单元当中保存的取数指令取出来，给MDR中（MDR中现在就有了指令）\nMDR把取出来的指令送给IR（IR存放当前欲执行的指令和当前指令操作数的地址）\n分析指令 IR送给CU\n从IR的地址码部分取出操作数地址送给MAR（CU控制IR把操作数地址送给MAR）\nMAR把地址给存储体（在控制器的控制下，存储体把指定存储单元当中保存的取数指令要去的数取出来，）\n存储体把找到的数据给MDR\nMDR送给运算器中的ACC\n\n以存数指令为例\n\nPC把需要的指令的地址送给MAR（控制器上的PC中存放着要执行的指令的地址，指令保存在存储体当中）\nMAR把地址送给存储体（在控制器的控制下，存储体把指定存储单元当中保存的存数指令取出来，送入MDR中）\n存储体把指定存储单元当中保存的存数指令取出来，给MDR中（MDR中现在就有了指令）\nMDR把取出来的指令送给IR（IR存放当前欲执行的指令和当前指令操作数的地址）\n分析指令 IR送给CU\n从IR的地址码部分取出操作数地址送给MAR（CU控制IR把操作数地址送给MAR）\nMAR把地址给存储体（在控制器CU的控制下，MAR把地址给存储体，告诉存储体现在有一个数据要存进来，对应的地址是多少）\n运算器中ACC中的内容取出来送给MDR（CU控制）\nMDR把得到的数据保存到存储体（在CU控制的控制之下把MDR中的数据保存的存储体对应的地址中）\n\nax2 + bx + c 程序的运行过程\n将程序通过输入设备送至计算机\n\n程序首地址 -&gt; PC\n\n启动程序运行\n\n取指令 PC -&gt; MAR -&gt; M(存储体) -&gt; MDR -&gt; IR ,(PC)+1 -&gt; PC\n\n分析指令 OP(IR)(指令的操作码部分) -&gt; CU\n\n执行指令 Ad(IR)(指令的操作数部分) -&gt; MAR -&gt; M -&gt; MDR -&gt; ACC\n…\n\n打印结果\n\n停机\n\n\n","slug":"计算机的基本组成","date":"2022-08-29T15:02:22.000Z","categories_index":"","tags_index":"","author_index":"暗使开开"},{"id":"75d33a392d03942d61d72e896069198e","title":"VScode","content":"VScode问题解决vscode编译 不允许使用与号(&amp;)原因：vscode终端（terminal）默认是powershell，vscode在powershell中输入指令时会出现某种我无法理解的问题\n解决方法：将默认终端设置为cmd\n\n点击Select Default Profile\n\n选择Command Prompt\n\n\n","slug":"VScode","date":"2021-08-29T15:02:22.000Z","categories_index":"","tags_index":"","author_index":"暗使开开"},{"id":"4df92e277050af68278af1388258011f","title":"C++高并发解决方案","content":"C++高并发解决方案\nTCP+多线程 对服务器性能要求比较高\n\nselect（是一个文件描述符（fd）的集合，一个文件描述符对应一个客户端）对服务器性能要求比较低，是单线程在循环，并发量有限，处理效率低（循环遍历整合集合）\n\nepoll 理论上并发量无限，处理效率较高，不用遍历整个事件，有事件发生时直接跳过去（epoll_event结构体）集合\n\nepoll+多线程 频繁启动线程浪费时间\n\nepoll+线程池\n\nlibevent（bufferevent的集合，每个bufferevent对应一个客户端）\n\nlibevent+多线程（和epoll+多线程不同，它不允许由多个线程来操作这个集合）\n\n\n","slug":"C-高并发解决方案","date":"2021-07-30T03:48:58.000Z","categories_index":"","tags_index":"","author_index":"暗使开开"}]