{"title":"C++面试题","uid":"222b440dd80fa4c997be1565560f0d77","slug":"C面试题","date":"2024-07-30T03:50:33.000Z","updated":"2024-07-30T03:55:53.694Z","comments":true,"path":"api/articles/C面试题.json","keywords":null,"cover":[],"content":"<h1 id=\"C-面试题\"><a href=\"#C-面试题\" class=\"headerlink\" title=\"C++面试题\"></a>C++面试题</h1><h2 id=\"简述下-C-语言的特点\"><a href=\"#简述下-C-语言的特点\" class=\"headerlink\" title=\"简述下 C++ 语言的特点\"></a>简述下 C++ 语言的特点</h2><ol>\n<li><p>C++ 在 C 语言基础上引入了面对对象的机制，同时也兼容C语言。</p>\n</li>\n<li><p>C++ 有三大特性（1）封装（2）继承（3）多态。</p>\n</li>\n<li><p>C++ 语言编写出的程序结构清晰、易于扩充，程序可读性好。</p>\n</li>\n<li><p>C++ 生成的代码质量高，运行效率高，仅比汇编语言慢 10%～20%；</p>\n</li>\n<li><p>C++ 更加安全，增加了 const常 量、引用、四类 cast 转换（static_cast、dynamic_cast、const_cast、reinterpret_cast）、智能指针、try—catch 等等；</p>\n</li>\n<li><p>C++ 可复用性高，C++ 引入了模板的概念，后面在此基础上，实现了方便开发的标准模板库STL（StandardTemplate Library）。</p>\n</li>\n<li><p>同时，C++ 是不断在发展的语言。C++ 后续版本更是发展了不少新特性，如 C++11 中引入了 nullptr、auto变量、Lambda 匿名函数、右值引用、智能指针。</p>\n</li>\n</ol>\n<h2 id=\"C-语言和-C-的区别\"><a href=\"#C-语言和-C-的区别\" class=\"headerlink\" title=\"C 语言和 C++ 的区别\"></a>C 语言和 C++ 的区别</h2><ol>\n<li>C 语言是 C++ 的子集，C++ 可以很好兼容C语言。但是 C++ 又有很多新特性，如引用、智能指针、auto 变<br>量等。</li>\n<li>C++ 是面对对象的编程语言；C 语言是面对过程的编程语言。</li>\n<li>C 语言有一些不安全的语言特性，如指针使用的潜在危险、强制转换的不确定性、内存泄露等。而 C++ 对此增加了不少新特性来改善安全性，如 const 常量、引用、cast转换、智能指针、try—catch 等等；</li>\n<li>C++ 可复用性高，C++ 引入了模板的概念，后面在此基础上，实现了方便开发的标准模板库STL。C++ 的<br>STL 库相对于 C 语言的函数库更灵活、更通用。</li>\n</ol>\n<h2 id=\"C-结构体和-C-结构体的区别\"><a href=\"#C-结构体和-C-结构体的区别\" class=\"headerlink\" title=\"C++ 结构体和 C 结构体的区别\"></a>C++ 结构体和 C 结构体的区别</h2><ol>\n<li><p>C 的结构体内不允许有函数存在，C++ 允许有内部成员函数，且允许该函数是虚函数。</p>\n</li>\n<li><p>C 的结构体对内部成员变量的访问权限只能是 public，而 C++ 允许 public,protected,private 三种。</p>\n</li>\n<li><p>C语言的结构体是不可以继承的，C++ 的结构体是可以从其他的结构体或者类继承过来的。</p>\n</li>\n<li><p>C 中使用结构体需要加上 struct 关键字，或者对结构体使用 typedef 取别名，而 C++ 中可以省略 struct 关键<br>字直接使用。</p>\n<p><img src=\"C:\\Users\\JialinLee\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220623205847333.png\" alt=\"image-20220623205847333\"></p>\n<p>使用区别</p>\n<p>C 中使用结构体需要加上 struct 关键字，或者对结构体使用 typedef 取别名，而 C++ 中可以省略 struct 关键字直接使用，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">struct Student&#123; int iAgeNum; string strName; &#125;</span><br><span class=\"line\">typedef struct Student Student2; \t\t// C 中取别名</span><br><span class=\"line\">struct Student stu1; \t\t\t\t\t// C 中正常使用</span><br><span class=\"line\">Student2 stu2; \t\t\t\t\t\t// C 中通过取别名的使用</span><br><span class=\"line\">Student stu3; \t\t\t\t\t\t// C++ 中使用</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"静态局部变量，全局变量，局部变量的特点\"><a href=\"#静态局部变量，全局变量，局部变量的特点\" class=\"headerlink\" title=\"静态局部变量，全局变量，局部变量的特点\"></a>静态局部变量，全局变量，局部变量的特点</h2><ul>\n<li>从作用域考虑<ul>\n<li>C++ 里作用域可分为6种：全局，局部，类，语句，命名空间和文件作用域。<br>全局变量：全局作用域，可以通过extern作用于其他非定义的源文件。<br>局部变量：局部作用域，比如函数的参数，函数内的局部变量等等。<br>静态局部变量 ：局部作用域，只被初始化一次，直到程序结束。</li>\n</ul>\n</li>\n<li>从所在空间考虑<ul>\n<li>除了局部变量在栈上外，其他都在静态存储区。因为静态变量都在静态存储区，所以下次调用函数的时候还是能取到原来的值。</li>\n</ul>\n</li>\n<li>从生命周期考虑<ul>\n<li>局部变量在栈上，出了作用域就回收内存。<br>全局变量、静态全局变量、静态局部变量都在静态存储区，直到程序结束才会回收内存。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"i-和-i-的区别\"><a href=\"#i-和-i-的区别\" class=\"headerlink\" title=\"i++ 和 ++i 的区别\"></a>i++ 和 ++i 的区别</h2><p>代码示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> int i = 2;</span><br><span class=\"line\"> int j = 2;</span><br><span class=\"line\"> j += i++; // 先赋值后加</span><br><span class=\"line\"> std::cout &lt;&lt; &quot;i= &quot; &lt;&lt; i &lt;&lt; &quot;, j = &quot; &lt;&lt; j &lt;&lt; std::endl; //i= 3, j = 4</span><br><span class=\"line\"> i = 2;</span><br><span class=\"line\"> j = 2;</span><br><span class=\"line\"> j += ++i; // 先加后赋值</span><br><span class=\"line\"> std::cout &lt;&lt; &quot;i= &quot; &lt;&lt; i &lt;&lt; &quot;, j = &quot; &lt;&lt; j &lt;&lt; std::endl; //i= 3, j = 5</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>赋值顺序不同：++ i 是先加后赋值；i ++ 是先赋值后加；++i和i++都是分两步完成的。</p>\n</li>\n<li><p>效率不同：后置 ++ 执行速度比前置的慢。</p>\n</li>\n<li><p>i++ 不能作为左值，而++i 可以，示例如下：</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">int i = 0;</span><br><span class=\"line\">int* p1 = &amp;(++i); // 正确</span><br><span class=\"line\">int* p2 = &amp;(i++); // 错误</span><br><span class=\"line\">++i = 1; \t  \t   // 正确</span><br><span class=\"line\">i++ = 1; \t\t   // 错误</span><br></pre></td></tr></table></figure>\n\n<p> 4.两者都不是原子操作。</p>\n<ul>\n<li><p>结构体和类的区别</p>\n<p>C++中的<a href=\"https://so.csdn.net/so/search?q=struct&spm=1001.2101.3001.7020\">struct</a>对C中的struct进行了扩充，它已经不再只是一个包含不同数据类型的数据结构了，它已经获取了太多的功能。<br>struct能包含<a href=\"https://so.csdn.net/so/search?q=%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0&spm=1001.2101.3001.7020\">成员函数</a>吗？ 能！<br>struct能继承吗？ 能！！<br>struct能实现<a href=\"https://so.csdn.net/so/search?q=%E5%A4%9A%E6%80%81&spm=1001.2101.3001.7020\">多态</a>吗？ 能！！！</p>\n<p>既然这些它都能实现，那它和class还能有什么区别？</p>\n<p>最本质的一个区别就是默认的访问控制：</p>\n<p>默认的继承<a href=\"https://so.csdn.net/so/search?q=%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90&spm=1001.2101.3001.7020\">访问权限</a></p>\n<p>struct是public的，class是private的。</p>\n</li>\n<li><p>C++面向对象</p>\n</li>\n<li><p>static的作用</p>\n<p>静态分配方式下的内存在程序编译的时候就已经分配好了且存在于程序的整个运行过程。例如 static 变量，其生命周期随程序的结束而结束，而非像一般变量随函数或作用域的结束而结束。</p>\n<p>除了 static 变量，还有一种全局对象 static object，也可以存放在静态存储区。</p>\n<p><a href=\"https://so.csdn.net/so/search?q=static&spm=1001.2101.3001.7020\">static</a>是C++中很常用的修饰符，它被用来控制变量的存储方式和可见性。、</p>\n<p>需要一个数据对象为整个类而非某个对象服务,同时又力求不破坏类的封装性,即要求此成员隐藏在类的内部，对外不可见。</p>\n</li>\n<li><p>变量的声明和定义有什么区别<br>为变量分配地址和存储空间的称为定义，不分配地址的称为声明。一个变量可以在多个地方声明，但是只在一个地方定义。加入 extern 修饰的是变量的声明，说明此变量将在文件以外或在文件后面部分定义。说明：很多时候一个变量，只是声明不分配内存空间，直到具体使用时才初始化，分配内存空间，<br>如外部变量。</p>\n<ul>\n<li><p>extern是什么</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">extern int i; //声明，不是定义</span><br><span class=\"line\">int i; //声明，也是定义</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n","feature":true,"text":"C++面试题简述下 C++ 语言的特点 C++ 在 C 语言基础上引入了面对对象的机制，同时也兼容C语言。 C++ 有三大特性（1）封装（2）继承（3）多态。 ...","permalink":"/post/C面试题","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#C-%E9%9D%A2%E8%AF%95%E9%A2%98\"><span class=\"toc-text\">C++面试题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%80%E8%BF%B0%E4%B8%8B-C-%E8%AF%AD%E8%A8%80%E7%9A%84%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">简述下 C++ 语言的特点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#C-%E8%AF%AD%E8%A8%80%E5%92%8C-C-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">C 语言和 C++ 的区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#C-%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C-C-%E7%BB%93%E6%9E%84%E4%BD%93%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">C++ 结构体和 C 结构体的区别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9D%99%E6%80%81%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%EF%BC%8C%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%EF%BC%8C%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E7%9A%84%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">静态局部变量，全局变量，局部变量的特点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#i-%E5%92%8C-i-%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">i++ 和 ++i 的区别</span></a></li></ol></li></ol>","author":{"name":"暗使开开","slug":"blog-author","avatar":"\\favicon.ico","link":"/","description":"<p>即使是虚拟的也会开心</p>唯有终夜长开眼，报以平生未展眉","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"雅思","uid":"487367ff609355e6216873e9408d459b","slug":"雅思","date":"2024-07-30T03:56:53.000Z","updated":"2024-07-30T03:57:05.926Z","comments":true,"path":"api/articles/雅思.json","keywords":null,"cover":null,"text":"IELTS 剑雅真题8-16 考点词538 SIMON雅思课 慎小嶷写作素材库 软件 雅思哥 雅思考满分 每日英语听题 part1 一般加特殊 设置条件，一定要...","permalink":"/post/雅思","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[],"tags":[],"author":{"name":"暗使开开","slug":"blog-author","avatar":"\\favicon.ico","link":"/","description":"<p>即使是虚拟的也会开心</p>唯有终夜长开眼，报以平生未展眉","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"总线的分类","uid":"67a07993746681dd1e13888391663bfc","slug":"总线的分类","date":"2022-08-29T15:02:22.000Z","updated":"2024-07-30T04:03:04.594Z","comments":true,"path":"api/articles/总线的分类.json","keywords":null,"cover":null,"text":"总线的分类1.片内总线芯片内部 的总线 2.系统总线计算机各部件之间 的信息传输线 数据总线 双向 与机器字长、存储字长有关地址总线 单向 与存储地址、 I/O...","permalink":"/post/总线的分类","photos":[],"count_time":{"symbolsCount":199,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"暗使开开","slug":"blog-author","avatar":"\\favicon.ico","link":"/","description":"<p>即使是虚拟的也会开心</p>唯有终夜长开眼，报以平生未展眉","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}